import { User, SessionData } from '../interfaces';
import { BaseConversationFlow } from './ConversationFlow';
import { MessageService, SecurityService, CustomerService } from '../services';

/**
 * Flujo de soporte t√©cnico mejorado con men√∫ principal
 */export class TechnicalSupportFlow extends BaseConversationFlow {
    readonly name: string = 'technicalSupport';

    private customerService: CustomerService;

    constructor(
        messageService: MessageService,
        securityService: SecurityService,
        customerService: CustomerService
    ) {
        super(messageService, securityService);
        this.customerService = customerService;
    }    /**
     * Verifica si este flujo debe manejar el mensaje actual
     */
    async canHandle(user: User, message: string, session: SessionData): Promise<boolean> {
        // Solo manejar si:
        // 1. Usuario no autenticado solicita soporte
        // 2. Usuario autenticado selecciona opciones del men√∫ de soporte t√©cnico
        // 3. Usuario autenticado dice "soporte" directamente
        return (
            // Usuario no autenticado solicita soporte
            (!user.authenticated && (
                message.toLowerCase().includes('soporte') ||
                session.selectedService === 'soporte'
            )) ||
            // Usuario autenticado en flujo de soporte t√©cnico con selecci√≥n v√°lida del men√∫
            (user.authenticated &&
                session.flowActive === 'technicalSupport' &&
                this.isMenuSelection(message)) ||
            // Usuario autenticado solicita soporte nuevamente
            (user.authenticated &&
                message.toLowerCase() === 'soporte' &&
                session.flowActive !== 'technicalSupport')
        );
    }    /**
     * Maneja el flujo de soporte t√©cnico
     */
    async handle(user: User, message: string, session: SessionData): Promise<boolean> {
        try {
            // Si no est√° autenticado, redirigir al flujo de autenticaci√≥n
            if (!user.authenticated) {
                session.selectedService = 'soporte';
                user.hasSelectedService = true;

                await this.messageService.sendTextMessage(user.phoneNumber,
                    'üîß ¬°Perfecto! Te ayudar√© con el soporte t√©cnico.\n\n' +
                    'üîê Para acceder a nuestros servicios de soporte, necesito verificar tu identidad.\n\n' +
                    'Por favor, ingresa tu n√∫mero de documento (c√©dula):');

                // El flujo de autenticaci√≥n se encargar√° del resto
                return false; // Permitir que otro flujo maneje la autenticaci√≥n
            }

            // Si est√° autenticado y es una respuesta del men√∫, procesarla
            if (this.isMenuSelection(message)) {
                return await this.handleMenuSelection(user, message, session);
            }

            // Si es solicitud inicial de soporte, mostrar el men√∫
            if (message.toLowerCase() === 'soporte') {
                session.flowActive = 'technicalSupport';
                await this.showTechnicalSupportMenu(user);
                return true;
            }

            // Si llegamos aqu√≠, no es una selecci√≥n v√°lida
            await this.messageService.sendTextMessage(user.phoneNumber,
                '‚ùì No entend√≠ tu mensaje. Te muestro el men√∫ de soporte t√©cnico:');
            await this.showTechnicalSupportMenu(user);
            return true;

        } catch (error) {
            console.error('Error en flujo de soporte t√©cnico:', error);
            await this.messageService.sendTextMessage(user.phoneNumber,
                '‚ùå Lo siento, ha ocurrido un error. Por favor, intenta nuevamente.');
            return true;
        }
    }    /**
     * Muestra el men√∫ principal de soporte t√©cnico
     */
    private async showTechnicalSupportMenu(user: User): Promise<void> {
        // Obtener datos del usuario para personalizar
        let userName = 'Cliente';
        const userData = this.decodeUserData(user);
        if (userData?.customerName) {
            userName = userData.customerName.split(' ')[0];
        }

        const supportMenu = {
            messaging_product: 'whatsapp',
            to: user.phoneNumber,
            type: 'interactive',
            interactive: {
                type: 'list',
                header: {
                    type: 'text',
                    text: 'üîß Soporte T√©cnico Conecta2'
                },
                body: {
                    text: `¬°Hola ${userName}! üòä\n\n¬øEn qu√© puedo ayudarte hoy? Selecciona una opci√≥n:`
                },
                action: {
                    button: 'Ver opciones',
                    sections: [
                        {
                            title: 'Consultas Financieras',
                            rows: [
                                {
                                    id: 'facturas_deudas',
                                    title: 'üìÑ Consultar Facturas',
                                    description: 'Ver facturas y estado de cuenta'
                                },
                                {
                                    id: 'consultar_deuda',
                                    title: 'üí∞ Consultar Deuda',
                                    description: 'Ver saldo pendiente'
                                }
                            ]
                        },
                        {
                            title: 'Soporte T√©cnico',
                            rows: [
                                {
                                    id: 'crear_ticket',
                                    title: 'üé´ Reportar Problema',
                                    description: 'Crear ticket de soporte t√©cnico'
                                },
                                {
                                    id: 'ping_ip',
                                    title: 'üì° Test de Conexi√≥n',
                                    description: 'Verificar tu conexi√≥n'
                                }
                            ]
                        },
                        {
                            title: 'Gesti√≥n de Cuenta',
                            rows: [
                                {
                                    id: 'cambiar_password',
                                    title: 'üîê Cambiar Contrase√±a',
                                    description: 'Solicitar cambio de contrase√±a'
                                },
                                {
                                    id: 'mejorar_plan',
                                    title: '‚¨ÜÔ∏è Mejorar Plan',
                                    description: 'Cambiar o mejorar tu plan actual'
                                }
                            ]
                        },
                        {
                            title: 'Pagos',
                            rows: [
                                {
                                    id: 'puntos_pago',
                                    title: 'üè¶ Puntos de Pago',
                                    description: 'Ubicaciones y cuentas bancarias'
                                },
                                {
                                    id: 'comprobante_pago',
                                    title: 'üí≥ Enviar Comprobante',
                                    description: 'Subir comprobante de pago'
                                }
                            ]
                        }
                    ]
                }
            }
        };

        await this.messageService.sendMessage(supportMenu);
    }    /**
     * Verifica si el mensaje es una selecci√≥n del men√∫ interactivo
     */    
     private isMenuSelection(message: string): boolean {
         // Solo IDs exactos del men√∫ interactivo o texto espec√≠fico de los botones
         const menuOptions = [
             'facturas_deudas', 'consultar_deuda', 'crear_ticket', 'ping_ip',
             'cambiar_password', 'comprobante_pago', 'mejorar_plan',
             'puntos_pago'
         ];
     
         const lowercaseMessage = message.toLowerCase().trim();
     
         // Verificar IDs exactos primero
         if (menuOptions.includes(lowercaseMessage)) {
             return true;
         }        
         
         // Verificar textos exactos de los t√≠tulos del men√∫
         const menuTitles = [
             'üìÑ facturas y deudas',
             'üé´ reportar problema',
             'üì° verificar conexi√≥n',
             'üîê cambiar contrase√±a',
             'üí≥ enviar comprobante',
             '‚¨ÜÔ∏è mejorar plan',
             'üè¶ puntos de pago'
         ];
     
         // Verificar coincidencias parciales con los t√≠tulos
         if (menuTitles.some(title =>
             lowercaseMessage.includes(title.toLowerCase()) ||
             title.toLowerCase().includes(lowercaseMessage)
         )) {
             return true;
         }
         
         // Verificar variantes comunes de "crear ticket" o "reportar problema"
         const ticketVariants = [
             'crear ticket', 'rear ticket', 'reportar problema', 'reportar falla',
             'ticket', 'problema t√©cnico', 'reportar problemas t√©cnicos'
         ];
         
         return ticketVariants.some(variant => lowercaseMessage.includes(variant));
     }    /**
     * Procesa la selecci√≥n del usuario desde el men√∫
     */
    private async handleMenuSelection(user: User, message: string, session: SessionData): Promise<boolean> {
        const selection = message.toLowerCase().trim();

        // Limpiar el flowActive para permitir que otros flujos tomen el control
        session.flowActive = '';

        try {
            if (selection.includes('facturas') || selection.includes('deudas') || selection === 'facturas_deudas') {
                // Activar flag para facturas
                session.consultingInvoices = true;
                return false; // Permitir que InvoicesFlow maneje esto
            }

            else if (selection.includes('consultar_deuda') || selection === 'consultar_deuda') {
                // Obtener informaci√≥n de deuda del cliente
                try {
                    const debtInfo = await this.customerService.getCustomerDebt(user.customerId!);

                    if (!debtInfo) {
                        await this.messageService.sendTextMessage(user.phoneNumber,
                            '‚ùå Lo siento, no pude obtener la informaci√≥n de tu deuda en este momento.\n\n' +
                            'Por favor, intenta nuevamente m√°s tarde o contacta a nuestro servicio al cliente.');
                        return true;
                    }

                    let debtMessage = '';
                    if (debtInfo.totalDebt === 0) {
                        debtMessage = '‚úÖ *¬°Felicitaciones!*\n\n' +
                            'üéâ No tienes deudas pendientes\n' +
                            'üìä Tu cuenta est√° al d√≠a';
                    } else {
                        debtMessage = `üí∞ *Resumen de Deuda*\n\n` +
                            `üî¥ Total adeudado: $${debtInfo.totalDebt.toLocaleString()}\n` +
                            `üìÑ Facturas pendientes: ${debtInfo.pendingInvoices}\n` +
                            `üìÖ Pr√≥xima fecha l√≠mite: ${debtInfo.nextDueDate ? new Date(debtInfo.nextDueDate).toLocaleDateString() : 'No disponible'}\n\n` +
                            `üí° Paga antes del vencimiento para evitar suspensi√≥n del servicio.`;
                    }

                    await this.messageService.sendTextMessage(user.phoneNumber, debtMessage);
                    return true;
                } catch (error) {
                    console.error('Error al consultar deuda:', error);
                    await this.messageService.sendTextMessage(user.phoneNumber,
                        'Lo siento, ocurri√≥ un error al consultar tu deuda. Por favor, intenta nuevamente m√°s tarde.');
                    return true;
                }
            }

            else if (selection.includes('ticket') || selection.includes('problema') || selection === 'crear_ticket' || 
                selection.includes('rear ticket') || selection.includes('reportar problema') || 
                selection.includes('reportar falla') || selection.includes('problema t√©cnico') || 
                selection.includes('reportar problemas t√©cnicos')) {
                // Activar flag para tickets
                session.creatingTicket = true;
                console.log('üé´ Activando flujo de creaci√≥n de tickets desde TechnicalSupportFlow');
                return false; // Permitir que TicketCreationFlow maneje esto
            } else if (selection.includes('ping') || selection.includes('conexi√≥n') || selection === 'ping_ip') {
                // Activar flujo de diagn√≥stico IP sin mensaje adicional
                session.flowActive = 'ipDiagnostic';
                session.diagnosticInProgress = true;

                // Mensaje inicial del diagn√≥stico
                await this.messageService.sendTextMessage(user.phoneNumber,
                    'üì° **Diagn√≥stico de Conexi√≥n**\n\n' +
                    'Iniciando verificaci√≥n de tu conexi√≥n...\n\n' + '‚è≥ Por favor espera mientras verifico tu IP...');

                return false; // Permitir que IPDiagnosticFlow maneje esto
            }

            else if (selection.includes('password') || selection.includes('contrase√±a') || selection === 'cambiar_password') {
                // Activar cambio de contrase√±a
                session.changingPassword = true;
                return false; // Permitir que PasswordChangeFlow maneje esto
            } else if (selection.includes('comprobante') || selection === 'comprobante_pago') {
                // Enviar mensaje de soporte para comprobantes
                await this.messageService.sendTextMessage(user.phoneNumber,
                    'üìÑ **Verificaci√≥n de Comprobantes de Pago**\n\n' +
                    'Para verificar tu comprobante de pago, por favor env√≠a una foto clara del recibo o captura de pantalla de la transferencia.\n\n' +
                    'Un asesor verificar√° tu pago y te notificar√° cuando sea registrado en el sistema.');

                return true;
            }

            else if (selection.includes('plan') || selection.includes('mejorar') || selection === 'mejorar_plan') {
                // Activar mejora de plan
                session.upgradingPlan = true;
                return false; // Permitir que PlanUpgradeFlow maneje esto
            }

            else if (selection.includes('puntos') || selection.includes('pago') || selection === 'puntos_pago') {
                // Mostrar informaci√≥n de puntos de pago actualizada
                await this.messageService.sendTextMessage(user.phoneNumber,
                    'üè¶ **Puntos de Pago Conecta2**\n\n' +
                    'Puedes realizar tu pago en cualquiera de estos puntos:\n\n' +
                    'üìç **Oficina Principal**\n' +
                    'Direcci√≥n: Centro de Piendam√≥, Cauca\n' +
                    'Horario: Lunes a Viernes 8:00 AM - 5:00 PM\n' +
                    'S√°bados: 8:00 AM - 12:00 PM\n\n' +
                    'üí≥ **Transferencias Bancarias:**\n' +
                    'Banco: Bancolombia\n' +
                    'Cuenta: 123-456-789\n' +
                    'A nombre de: Conecta2 Telecomunicaciones\n\n' +
                    'üåê **Pago Online:**\n' +
                    'Link: https://clientes.portalinternet.app/saldo/conecta2tel/\n\n' +
                    'üí° **Recuerda:** Env√≠a tu comprobante de pago despu√©s de realizar la transacci√≥n.');

                return true; // Finalizamos aqu√≠
            }

            else {
                // Opci√≥n no reconocida - No mostrar men√∫ nuevamente, solo informar
                await this.messageService.sendTextMessage(user.phoneNumber,
                    '‚ùì No entend√≠ tu selecci√≥n. Por favor, usa el men√∫ interactivo para seleccionar una opci√≥n v√°lida.');
                return true;
            }

        } catch (error) {
            console.error('Error procesando selecci√≥n del men√∫:', error);
            await this.messageService.sendTextMessage(user.phoneNumber,
                '‚ùå Hubo un error procesando tu selecci√≥n. Por favor, intenta nuevamente.');
            return true;
        }
    }
}
