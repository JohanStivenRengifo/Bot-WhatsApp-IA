import { User, SessionData } from '../interfaces';
import { BaseConversationFlow } from './ConversationFlow';
import { MessageService, SecurityService, CustomerService } from '../services';
import { extractMenuCommand, isMenuCommand } from '../utils/messageUtils';
import { config } from '../config';
import axios from 'axios';

// Interfaces para manejar las respuestas de la API seg√∫n la estructura real de WispHub
interface PingDetail {
    status: string;
    received: string;
    "packet-loss": string;
    sent: string;
    seq: string;
}

interface PingResultItem {
    [key: string]: PingDetail | string; // ping-1, ping-2, etc. o ping-exitoso
}

interface WispHubPingResponse {
    task_id: string;
}

interface WispHubTaskResponse {
    task: {
        status: string;
        id: string;
        result: PingResultItem[] | null;
    };
}

/**
 * Flujo para realizar diagn√≥stico de IP mediante ping
 */
export class IPDiagnosticFlow extends BaseConversationFlow {
    readonly name: string = 'IPDiagnosticFlow';
    private customerService: CustomerService;

    constructor(
        messageService: MessageService,
        securityService: SecurityService,
        customerService: CustomerService
    ) {
        super(messageService, securityService);
        this.customerService = customerService;
    }    /**
     * Verifica si el flujo puede manejar el mensaje actual
     */
    async canHandle(user: User, message: string, session: SessionData): Promise<boolean> {
        if (!user.authenticated) return false;

        // Si el flujo ya est√° activo (activado por ClientMenuFlow)
        if (session.flowActive === 'ipDiagnostic') {
            return true;
        }

        // Si ya hay un diagn√≥stico en progreso, este flujo debe manejar el mensaje
        if (session.diagnosticInProgress === true) return true;

        const extractedCommand = extractMenuCommand(message);

        // Verificar comando directo del men√∫
        if (extractedCommand === 'ping') return true;

        // Verificar otros comandos relacionados
        return isMenuCommand(message, [
            'test_conexion', 'test de conexion', 'test de conexi√≥n',
            'diagnostico_ip', 'diagn√≥stico ip', 'diagnostico ip',
            'ping_ip', 'ping ip', 'estado de conexion', 'estado de conexi√≥n',
            'verificar estado', 'verificar conexi√≥n'
        ]);
    }/**
     * Maneja el mensaje dentro del flujo de diagn√≥stico IP
     */
    async handle(user: User, message: string, session: SessionData): Promise<boolean> {
        try {
            // Obtener los datos del usuario para extraer el id_servicio
            const userData = this.decodeUserData(user);
            if (!userData || !userData.id_servicio) {
                await this.messageService.sendTextMessage(
                    user.phoneNumber,
                    '‚ùå No se pudo obtener la informaci√≥n de tu servicio. Por favor, contacta a soporte t√©cnico.'
                );
                return true;
            }

            const id_servicio = userData.id_servicio;

            // Verificar si el diagn√≥stico ya est√° en progreso y si ya se inici√≥ la tarea
            if (session.diagnosticInProgress && session.diagnosticTaskId) {
                // Ya hay un diagn√≥stico en progreso, no hacer nada m√°s
                await this.messageService.sendTextMessage(
                    user.phoneNumber,
                    '‚è≥ Ya tienes un diagn√≥stico en progreso. Te notificar√© cuando est√© listo.'
                );
                return true;
            }

            // Iniciar el proceso de diagn√≥stico si no est√° en progreso
            if (!session.diagnosticInProgress || !session.diagnosticTaskId) {
                // Activar el diagn√≥stico y limpiar cualquier tarea anterior
                session.diagnosticInProgress = true;
                session.diagnosticTaskId = undefined; await this.messageService.sendTextMessage(
                    user.phoneNumber,
                    'üîÑ Realizando prueba de conexi√≥n...\n\n' +
                    'Este proceso puede tomar entre 30 segundos y 3 minutos.\n' +
                    'Te notificar√© cuando los resultados est√©n listos.'
                ); try {
                    // Validar n√∫mero de pings (m√°ximo 10 seg√∫n documentaci√≥n)
                    const numPings = Math.min(Math.max(3, 3), 10); // Entre 3 y 10 pings

                    console.log(`[IPDiagnostic] Iniciando ping para cliente ${id_servicio} con ${numPings} pings`);

                    // Realizar la petici√≥n de ping usando la API de WispHub
                    const pingResponse = await axios.post(
                        `${config.wisphub.baseUrl}clientes/${id_servicio}/ping/`,
                        {
                            pings: numPings,
                            interfaz: "ether1",
                            arp_ping: true
                        },
                        {
                            headers: {
                                'Authorization': config.wisphub.apiKey,
                                'Content-Type': 'application/json'
                            },
                            timeout: 10000 // 10 segundos de timeout para la petici√≥n inicial
                        }
                    );

                    console.log(`[IPDiagnostic] Respuesta de ping recibida:`, pingResponse.status, pingResponse.data);

                    // Verificar que la respuesta sea 202 Accepted seg√∫n documentaci√≥n
                    if (pingResponse.status === 202 && pingResponse.data && pingResponse.data.task_id) {
                        session.diagnosticTaskId = pingResponse.data.task_id;
                        console.log(`[IPDiagnostic] Task ID recibido: ${session.diagnosticTaskId}`);

                        // Esperar 30 segundos antes de verificar el resultado inicial
                        setTimeout(() => this.checkPingResult(user, session, 0), 30000);
                    } else {
                        throw new Error(`Respuesta inesperada de la API: Status ${pingResponse.status}`);
                    }
                } catch (error: any) {
                    console.error(`[IPDiagnostic] Error al realizar ping:`, error.message);
                    session.diagnosticInProgress = false;

                    // Manejo espec√≠fico de errores HTTP
                    if (error.response) {
                        const status = error.response.status;
                        if (status === 404) {
                            await this.messageService.sendTextMessage(
                                user.phoneNumber,
                                '‚ùå No se encontr√≥ informaci√≥n de tu servicio.\n\n' +
                                'Esto puede deberse a:\n' +
                                '‚Ä¢ ID de servicio incorrecto\n' +
                                '‚Ä¢ Servicio no registrado en el sistema\n\n' +
                                'Por favor, contacta a soporte t√©cnico.'
                            );
                        } else if (status === 401) {
                            await this.messageService.sendTextMessage(
                                user.phoneNumber,
                                '‚ùå Error de autenticaci√≥n con el servidor.\n\n' +
                                'Por favor, intenta nuevamente m√°s tarde.'
                            );
                        } else {
                            await this.messageService.sendTextMessage(
                                user.phoneNumber,
                                `‚ùå Error del servidor (${status}). Por favor, intenta nuevamente m√°s tarde.`
                            );
                        }
                    } else {
                        await this.messageService.sendTextMessage(
                            user.phoneNumber,
                            '‚ùå Error al realizar el diagn√≥stico de conexi√≥n. Por favor, intenta nuevamente m√°s tarde.'
                        );
                    }
                }
            }
            return true;
        } catch (error: any) {
            session.diagnosticInProgress = false;
            session.diagnosticTaskId = undefined;
            await this.messageService.sendTextMessage(
                user.phoneNumber,
                '‚ùå Error interno en el sistema de diagn√≥stico. Por favor, contacta a soporte t√©cnico.'
            );
            return true;
        }
    }    /**
     * Verifica el resultado del ping usando la API de WispHub
     */
    private async checkPingResult(user: User, session: SessionData, retryCount: number = 0): Promise<void> {
        const maxRetries = 5; // M√°ximo 5 reintentos (total ~3 minutos)
        const retryDelay = 30000; // 30 segundos entre reintentos

        if (!session.diagnosticTaskId) {
            session.diagnosticInProgress = false;
            await this.messageService.sendTextMessage(
                user.phoneNumber,
                '‚ùå No se pudo completar el diagn√≥stico. Por favor, intenta nuevamente.'
            );
            return;
        } try {
            console.log(`[IPDiagnostic] Verificando resultado del ping. Intento: ${retryCount + 1}/${maxRetries + 1}`);

            // Consultar el estado de la tarea usando la API de WispHub
            const taskResponse = await axios.get(
                `${config.wisphub.baseUrl}tasks/${session.diagnosticTaskId}/`,
                {
                    headers: {
                        'Authorization': config.wisphub.apiKey
                    },
                    timeout: 10000
                }
            );

            console.log(`[IPDiagnostic] Respuesta de la tarea:`, taskResponse.status, taskResponse.data);

            const taskData: WispHubTaskResponse = taskResponse.data; if (taskData.task.status === 'SUCCESS') {
                // Procesar y mostrar el resultado exitoso                console.log(`[IPDiagnostic] Tarea completada exitosamente`);
                console.log(`[IPDiagnostic] Resultado completo:`, JSON.stringify(taskData.task.result, null, 2));
                await this.showPingResults(user, taskData, session);
            } else if (taskData.task.status === 'PENDING' || taskData.task.status === 'RUNNING' || taskData.task.status === 'STARTED') {
                // La tarea a√∫n est√° en proceso
                if (retryCount < maxRetries) {
                    console.log(`[IPDiagnostic] Tarea a√∫n en proceso (${taskData.task.status}). Esperando...`);

                    // Solo enviar mensaje de espera en ciertos reintentos para no saturar
                    if (retryCount === 1 || retryCount === 3) {
                        await this.messageService.sendTextMessage(
                            user.phoneNumber,
                            '‚è≥ El diagn√≥stico a√∫n est√° en proceso. Espera un poco m√°s...'
                        );
                    }

                    // Esperar antes del siguiente intento
                    setTimeout(() => this.checkPingResult(user, session, retryCount + 1), retryDelay);
                    return;
                } else {
                    // Se agotaron los reintentos
                    console.log(`[IPDiagnostic] Se agotaron los reintentos para la tarea`);
                    await this.messageService.sendTextMessage(
                        user.phoneNumber,
                        '‚è∞ El diagn√≥stico est√° tomando m√°s tiempo del esperado.\n\n' +
                        'Esto puede indicar:\n' +
                        '‚Ä¢ El servidor est√° muy ocupado\n' +
                        '‚Ä¢ Tu conexi√≥n puede estar experimentando problemas\n\n' +
                        'Por favor, intenta nuevamente en unos minutos o contacta a soporte t√©cnico.'
                    );
                }
            } else {
                // La tarea fall√≥ o tiene un estado desconocido
                console.log(`[IPDiagnostic] La tarea fall√≥ o tiene estado desconocido: ${taskData.task.status}`);
                await this.messageService.sendTextMessage(
                    user.phoneNumber,
                    `‚ùå El diagn√≥stico de conexi√≥n fall√≥ (Estado: ${taskData.task.status}). Por favor, intenta nuevamente m√°s tarde.`
                );
            }
        } catch (error: any) {
            console.error(`[IPDiagnostic] Error al verificar resultado del ping:`, error.message);

            // Si es un error de red y no hemos agotado los reintentos, intentar de nuevo
            if (retryCount < maxRetries && (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT' || error.code === 'ECONNRESET')) {
                console.warn(`[IPDiagnostic] Reintento ${retryCount + 1}/${maxRetries} para verificar resultado del ping:`, error.message);
                setTimeout(() => this.checkPingResult(user, session, retryCount + 1), retryDelay);
                return;
            }

            await this.messageService.sendTextMessage(
                user.phoneNumber,
                '‚ùå Error al verificar el resultado del diagn√≥stico. Por favor, intenta nuevamente m√°s tarde.'
            );
        }        // Finalizar el proceso de diagn√≥stico
        session.diagnosticInProgress = false;
        session.diagnosticTaskId = undefined;
        console.log(`[IPDiagnostic] üèÅ Proceso de diagn√≥stico finalizado para usuario ${user.phoneNumber}`);
    }/**
     * Muestra los resultados del ping al usuario
     */
    private async showPingResults(user: User, taskData: WispHubTaskResponse, session: SessionData): Promise<void> {
        let resultMessage = '‚úÖ Prueba completada\n\n';

        console.log(`[IPDiagnostic] Procesando resultados de ping...`);
        console.log(`[IPDiagnostic] taskData.task.result existe:`, !!taskData.task.result);
        console.log(`[IPDiagnostic] Es array:`, Array.isArray(taskData.task.result));

        if (taskData.task.result && Array.isArray(taskData.task.result)) {
            const pingResults = taskData.task.result;
            console.log(`[IPDiagnostic] N√∫mero de elementos en result:`, pingResults.length);            // Log detallado de cada elemento
            pingResults.forEach((item, index) => {
                console.log(`[IPDiagnostic] Elemento ${index}:`, JSON.stringify(item, null, 2));
                // Mostrar tambi√©n las claves para debug
                console.log(`[IPDiagnostic] Claves del elemento ${index}:`, Object.keys(item));
            });

            // Separar los pings individuales del resumen
            const pingItems = pingResults.filter(item => {
                const keys = Object.keys(item);
                const hasPingKey = keys.some(key => key.startsWith('ping-') && key !== 'ping-exitoso');
                console.log(`[IPDiagnostic] Item keys:`, keys, `hasPingKey:`, hasPingKey);
                return hasPingKey;
            });

            console.log(`[IPDiagnostic] Ping items encontrados:`, pingItems.length);

            const summaryItem = pingResults.find(item => item['ping-exitoso']);
            const summary = summaryItem ? summaryItem['ping-exitoso'] as string : null;

            console.log(`[IPDiagnostic] Summary encontrado:`, summary); if (pingItems.length > 0) {
                // Analizar los resultados de ping
                let successfulPings = 0;
                let totalPings = pingItems.length;
                let totalLatency = 0;
                let pingDetails: string[] = [];

                console.log(`[IPDiagnostic] Analizando ${totalPings} pings...`);

                pingItems.forEach((item, index) => {
                    const pingKey = Object.keys(item).find(key => key.startsWith('ping-'));
                    console.log(`[IPDiagnostic] Procesando ping ${index + 1}, key:`, pingKey);

                    if (pingKey) {
                        const pingData = item[pingKey] as PingDetail;
                        const pingNumber = index + 1;

                        console.log(`[IPDiagnostic] Ping ${pingNumber} data:`, pingData);                        // Analizar el estado del ping - L√≥gica corregida
                        // Un ping es exitoso si:
                        // 1. El status no contiene errores como "Network is down" o "timeout"
                        // 2. Se recibieron paquetes (received > 0)
                        // 3. El status contiene informaci√≥n de tiempo (como "5ms") o "0 (success)"
                        const isSuccess = pingData.received &&
                            parseInt(pingData.received) > 0 &&
                            !pingData.status.toLowerCase().includes('network is down') &&
                            !pingData.status.toLowerCase().includes('timeout') &&
                            !pingData.status.toLowerCase().includes('unreachable');

                        console.log(`[IPDiagnostic] Ping ${pingNumber} - Status: "${pingData.status}", Received: "${pingData.received}", Success: ${isSuccess}`); if (isSuccess) {
                            successfulPings++;
                            // Intentar extraer tiempo de latencia del status
                            // Buscar patrones como "5ms", "0 (success)", "15ms", etc.
                            const timeMatch = pingData.status.match(/(\d+)\s*ms/) ||
                                pingData.status.match(/(\d+)\s*\(/) ||
                                pingData.status.match(/^(\d+)$/);
                            if (timeMatch) {
                                const latency = parseInt(timeMatch[1]);
                                if (!isNaN(latency)) {
                                    totalLatency += latency;
                                    console.log(`[IPDiagnostic] Ping ${pingNumber} latencia extra√≠da: ${latency}ms`);
                                }
                            }
                        }                        // Formatear detalle del ping con m√°s informaci√≥n
                        const statusEmoji = isSuccess ? '‚úÖ' : '‚ùå';
                        let statusText = '';

                        if (isSuccess) {
                            // Para pings exitosos, mostrar informaci√≥n detallada
                            const packetInfo = `${pingData.received}/${pingData.sent} paquetes`;
                            const lossInfo = pingData["packet-loss"] ? ` (p√©rdida: ${pingData["packet-loss"]})` : '';
                            statusText = `${packetInfo}${lossInfo} - ${pingData.status}`;
                        } else {
                            // Para pings fallidos, mostrar el motivo
                            if (pingData.received === '0' || parseInt(pingData.received) === 0) {
                                statusText = 'Sin respuesta - ' + pingData.status;
                            } else {
                                statusText = `${pingData.received}/${pingData.sent} - ${pingData.status}`;
                            }
                        }

                        pingDetails.push(`${statusEmoji} Ping ${pingNumber}: ${statusText}`);
                    }
                });

                console.log(`[IPDiagnostic] Pings exitosos: ${successfulPings}/${totalPings}`);

                // Mostrar estad√≠sticas generales
                const successRate = Math.round((successfulPings / totalPings) * 100);

                if (successfulPings > 0) {
                    resultMessage += 'üì∂ Estado de conexi√≥n: Activa\n';

                    if (totalLatency > 0) {
                        const avgLatency = Math.round(totalLatency / successfulPings);
                        resultMessage += `‚è±Ô∏è Latencia promedio: ${avgLatency}ms\n`;
                    }

                    resultMessage += `üîÑ Paquetes exitosos: ${successfulPings}/${totalPings} (${successRate}%)\n`;

                    if (summary) {
                        resultMessage += `üìä Resumen: ${summary}\n`;
                    }

                    resultMessage += '\nüìä Detalles:\n';
                    pingDetails.forEach(detail => {
                        resultMessage += detail + '\n';
                    });

                    // Evaluaci√≥n de la calidad de conexi√≥n
                    resultMessage += '\nüí° Evaluaci√≥n: ';
                    if (successRate === 100) {
                        resultMessage += 'Tu conexi√≥n funciona perfectamente üöÄ';
                    } else if (successRate >= 80) {
                        resultMessage += 'Tu conexi√≥n funciona bien con peque√±as p√©rdidas ‚úÖ';
                    } else if (successRate >= 50) {
                        resultMessage += 'Tu conexi√≥n tiene problemas intermitentes ‚ö†Ô∏è';
                    } else {
                        resultMessage += 'Tu conexi√≥n tiene problemas graves üö®';
                    }
                } else {
                    resultMessage = '‚ùå Prueba completada: Sin respuesta\n\n';
                    resultMessage += `üîÑ Paquetes: 0/${totalPings} recibidos (0%)\n\n`;

                    if (summary) {
                        resultMessage += `üìä Resumen: ${summary}\n\n`;
                    }

                    resultMessage += '‚ö†Ô∏è No se pudo establecer conexi√≥n con tu servicio.\n\n';
                    resultMessage += 'üí° Recomendaciones:\n';
                    resultMessage += '‚Ä¢ Verifica que tu equipo est√© encendido\n';
                    resultMessage += '‚Ä¢ Reinicia tu router/modem\n';
                    resultMessage += '‚Ä¢ Verifica los cables de conexi√≥n\n';
                    resultMessage += '‚Ä¢ Si el problema persiste, contacta a soporte t√©cnico';
                }
            } else {
                // Si no se encontraron ping items con el formato esperado,
                // intentar un procesamiento alternativo
                console.log(`[IPDiagnostic] No se encontraron ping items v√°lidos, intentando procesamiento alternativo`);

                // Buscar cualquier objeto que contenga informaci√≥n de ping
                const alternativePingData = pingResults.filter(item => {
                    const keys = Object.keys(item);
                    // Buscar claves que contengan informaci√≥n de ping
                    return keys.some(key =>
                        key.includes('ping') ||
                        key.includes('status') ||
                        key.includes('received') ||
                        key.includes('sent')
                    );
                });

                if (alternativePingData.length > 0) {
                    console.log(`[IPDiagnostic] Encontrados ${alternativePingData.length} elementos con datos de ping alternativos`);

                    resultMessage += `‚ö†Ô∏è Se encontraron ${alternativePingData.length} resultados de ping con formato no est√°ndar.\n\n`;

                    alternativePingData.forEach((item, index) => {
                        const keys = Object.keys(item);
                        resultMessage += `üìä Resultado ${index + 1}:\n`;
                        keys.forEach(key => {
                            if (typeof item[key] === 'string' || typeof item[key] === 'number') {
                                resultMessage += `  ‚Ä¢ ${key}: ${item[key]}\n`;
                            }
                        });
                        resultMessage += '\n';
                    });

                    if (summary) {
                        resultMessage += `üìä Resumen: ${summary}\n`;
                    }
                } else {
                    console.log(`[IPDiagnostic] No se encontraron ping items v√°lidos`);
                    resultMessage += '‚ö†Ô∏è No se obtuvieron resultados de ping v√°lidos.\n';
                    if (summary) {
                        resultMessage += `üìä Informaci√≥n disponible: ${summary}\n`;
                    }
                    resultMessage += 'Para un an√°lisis m√°s detallado, contacta a soporte t√©cnico.';
                }
            }
        } else {
            console.log(`[IPDiagnostic] No hay resultado o no es array`);
            resultMessage += '‚ö†Ô∏è No se obtuvieron detalles espec√≠ficos del diagn√≥stico.\n';
            resultMessage += 'Para un an√°lisis m√°s detallado, contacta a soporte t√©cnico.';
        } console.log(`[IPDiagnostic] Mensaje final a enviar:`, resultMessage); try {
            await this.messageService.sendTextMessage(user.phoneNumber, resultMessage);            // Agregar botones de navegaci√≥n al finalizar el diagn√≥stico
            await this.messageService.sendNavigationButtons(
                user.phoneNumber,
                'üîÑ Diagn√≥stico Completado',
                '¬øQu√© te gustar√≠a hacer ahora?'
            );            // Marcar que el diagn√≥stico ha finalizado
            if (session) {
                session.diagnosticInProgress = false;
                session.flowActive = ''; // Limpiar estado de flujo activo
            }

            console.log(`[IPDiagnostic] ‚úÖ Mensaje enviado exitosamente a ${user.phoneNumber}`);
        } catch (error) {
            console.error(`[IPDiagnostic] ‚ùå Error enviando mensaje:`, error);
            throw error;
        }
    }

    /**
     * Decodifica los datos del usuario desde la informaci√≥n almacenada
     * Sobrescribe el m√©todo de la clase base para adaptarlo a nuestras necesidades
     */
    protected decodeUserData(user: User): any {
        if (!user.customerId) {
            return null;
        }

        try {
            // Intentar usar los datos de servicios del usuario primero
            if (user.userServices && user.userServices.length > 0) {
                const service = user.userServices[0]; // Tomar el primer servicio
                return {
                    id_servicio: service.id,
                    customerName: service.name,
                    status: service.status
                };
            }

            // Intentar usar el m√©todo de la clase base si hay datos encriptados
            if (user.encryptedData) {
                const baseData = super.decodeUserData(user);
                if (baseData) {
                    // Los datos ya deber√≠an tener id_servicio desde la autenticaci√≥n
                    // Si no lo tiene, usar customerId como fallback
                    if (!baseData.id_servicio && baseData.customerId) {
                        baseData.id_servicio = baseData.customerId;
                    }
                    return baseData;
                }
            }

            // Si todo lo dem√°s falla, usar customerId como id_servicio
            return {
                id_servicio: user.customerId,
                customerName: "Usuario",
                status: "unknown"
            };
        } catch (error) {
            console.error('Error decodificando datos de usuario:', error);
            // Fallback final
            return {
                id_servicio: user.customerId,
                customerName: "Usuario",
                status: "unknown"
            };
        }
    }
}