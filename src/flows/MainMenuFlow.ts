import { User, SessionData } from '../interfaces';
import { BaseConversationFlow } from './ConversationFlow';
import { MessageService, SecurityService } from '../services';

/**
 * MainMenuFlow act√∫a como un despachador central solo para comandos de men√∫ y ayuda.
 * Para todos los dem√°s comandos, delega a los flujos especializados correspondientes.
 */
export class MainMenuFlow extends BaseConversationFlow {
    readonly name: string = 'mainMenu';

    // √önicamente comandos que este flujo maneja directamente
    private readonly directCommands = [
        'menu', 'inicio', 'ayuda', 'help'
    ];

    constructor(messageService: MessageService, securityService: SecurityService) {
        super(messageService, securityService);
    }

    /**
     * Verifica si este flujo debe manejar el mensaje actual.
     * Solo manejar√° directamente comandos de men√∫ y ayuda.
     */
    async canHandle(user: User, message: string, session: SessionData): Promise<boolean> {
        // Este flujo solo maneja mensajes de men√∫ y ayuda cuando:
        // 1. El usuario est√° autenticado
        // 2. No est√° en otro flujo espec√≠fico (como creaci√≥n de ticket)
        // 3. El mensaje es exactamente un comando de men√∫ o ayuda

        const normalizedMessage = message.toLowerCase().trim();

        return user.authenticated &&
            !session.creatingTicket &&
            !session.changingPassword &&
            this.directCommands.includes(normalizedMessage);
    }

    /**
     * Maneja solamente los comandos de men√∫ y ayuda
     */
    async handle(user: User, message: string, session: SessionData): Promise<boolean> {
        const command = message.toLowerCase().trim();

        if (command === 'menu' || command === 'inicio') {
            await this.messageService.sendMainMenu(user.phoneNumber);
            return true;
        } else if (command === 'ayuda' || command === 'help') {
            await this.sendHelpInfo(user);
            return true;
        }

        // Este flujo no deber√≠a llegar aqu√≠, ya que canHandle solo retorna true
        // para 'menu', 'inicio', 'ayuda' y 'help'
        return false;
    }

    /**
     * Env√≠a informaci√≥n de ayuda al usuario
     */
    private async sendHelpInfo(user: User): Promise<void> {
        await this.messageService.sendTextMessage(user.phoneNumber,
            'üìö *Centro de Ayuda*\n\n' +
            'Estos son los comandos disponibles:\n\n' +
            '‚Ä¢ *menu* - Mostrar men√∫ principal\n' +
            '‚Ä¢ *factura* - Consultar facturas\n' +
            '‚Ä¢ *deuda* - Ver saldo pendiente\n' +
            '‚Ä¢ *ping* - Probar tu conexi√≥n\n' +
            '‚Ä¢ *ticket* - Crear un ticket de soporte\n' +
            '‚Ä¢ *cambiar_clave* - Cambiar tu contrase√±a\n' +
            '‚Ä¢ *puntos_pago* - Ver opciones de pago\n' +
            '‚Ä¢ *mejorar_plan* - Consultar mejores planes\n\n' +
            'Si necesitas hablar con un agente humano, escribe "agente".');
    }
}
